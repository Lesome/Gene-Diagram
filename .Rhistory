#SORCS2cov=read.table("SORCS2cov.txt", header = T)
#str(SORCS2cov);head(SORCS2cov); tail(SORCS2cov)
#Create PLINK lgen file
lgen <- select(data,FID,IID,rs,A1,A2)
#str(lgen)
write.table(lgen,out4,sep='\t',quote=FALSE,row.names=F,col.names=F)
#SORCS2lgen=read.table("SORCS2.lgen", header = F)
#str(SORCS2lgen)
#Analyse the files in PLINK, format, and print the output. The analysis here is the same as that
#in the script for the adsp2plink function below, where it is better annotated.
assoc <- paste("plink",sep=" ","--lfile", output, "--assoc", "--ci 0.95", "--out", output)
logistic <- paste("plink",sep=" ","--lfile", output, "--logistic", "--covar", out3, "--covar-name RS,AUT,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.007 --out", output)
haplog <- paste("plink",sep=" ","--lfile", output, "--hap-window 20 --hap-logistic", "--covar", out3, "--covar-name RS,AUT,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.004 --out", output)
assocfile <- paste(output,sep="",".assoc")
logisfile <- paste(output,sep="",".assoc.logistic")
haplogfile <- paste(output,sep="",".assoc.hap.logistic")
system(assoc)
system(logistic)
system(haplog)
f1 <- read.table(assocfile, header=T)
#print(f1)
f1 <- f1 %>% select(CHR,SNP,BP,F_A, F_U, OR, P) %>% rename(FREQ_AD=F_A, FREQ_CON=F_U, OR_assoc=OR, P_assoc=P)
print(f1,digits=2,row.names=F)
print("", quote=F)
#head(f1)
f1 <- f1 %>% select(CHR,SNP,BP,FREQ_AD,FREQ_CON)
f2 <- read.table(logisfile, header=T)
#print(f2)
f2 <- f2 %>% filter (TEST=="ADD") %>% select (SNP,NMISS,OR,L95,U95,P) %>% rename(OR_logis=OR, P_logis=P)
#head(f2)
f3<- left_join(f1,f2,by="SNP")
print(f3,digits=2,row.names=F)
print("", quote=F)
write.table(f3,out5,sep=",", quote=FALSE,row.names=F,col.names=T)
#print("PLINK commands:");print(assoc);print(logistic)
f4 <- read.table(haplogfile, header=T)
f4 <- f4 %>% select(-NSNP,-NHAP,-STAT) %>% arrange(desc(HAPLOTYPE))
print(f4,digits=2, row.names=F)
print("", quote=F)
hapomni <- paste("plink",sep=" ","--lfile", output, "--hap-window 30 --hap-logistic", "--covar", out3, "--covar-name RS,AUT,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.005" --hap-omnibus --out", output)
system(hapomni)
f4 <- read.table(haplogfile, header=T)
f4 <- f4 %>% rename(Pomni=P)
print(f4,digits=2, row.names=F)
print("", quote=F)
}
```
####Function (adsp2plink) to read in and analyze ADSP TLR5 dataset
The data we have on the 5 common TLR5 missense variants in 3000 subjects from our ADSP dataset were captured by Joseph Reddy. Only 4 of the 5 common TLR5 missens SNPs were found in the ADSP dataset. We put his file (TLR5_flat_file 3000.txt) into the TLR5 repo.The following function reads the data in, creates PLINK files, and then analyzes them in PLINK as for the TLR5 dataset from the Younkin database.To improve readability of the html output, the r code should not be echoed.
```{r, eval=T, echo=F}
#Create function that (i) reads in the ADSP dataset generated by Joseph Reddy, (ii) outputs PLINK map, fam, cov.txt, and lgen files,
#(iii) analyzes in PLINK using --assoc, as well as --logistic, and --hap-logistic with appropriate covariates,
#(iv) prints out well organized results
adsp2plink <- function(input="TLR5_flat_file 3000.txt", output="TLR5_3000.adsp") {
#load requisite packages
library(data.table)
suppressWarnings(suppressMessages(library(dplyr)))
#While debugging it is helpful to set input and output values that will be called by the function
#It is also useful to employ the various str and print commands that are commented out below
#input <- "TLR5_flat_file 3000.txt"
#output <- "TLR5_3000.adsp"
#Read in data on 4 common SORCS2 missense variants in the ADSP database
data <- read.table(input, stringsAsFactors = FALSE, header=T)
#str(data); head(data); tail(data)
#Create output files
out1 <- paste(output,sep="",".map")
out2 <- paste(output,sep="",".fam")
out3 <- paste(output,sep="","_cov.txt")
out4 <- paste(output,sep="",".lgen")
out5 <- paste(output,sep="",".plink.csv")
#print(out1);print(out2);print(out3);print(out4);print(out5)
#Filter, using dplyr, to include only subjects with:
#Case.control = 2 or 1 corresponding to AD or CON, Sex = 0 or 1 (M or F), APOE = 22,23,24,33,34,or 44
#Series = ADSP, Age >= 65, Call = 11,12, or 22
library(dplyr)
dx_1 <- c(2,1,0)
sex_1 <- c(0,1)
apoe_1 <- c(22,23,24,33,34,44)
series_1 <- c("ADSP")
call_1 <- c(11,12,22)
data <- filter(data, Case.control %in% dx_1, Sex %in% sex_1, APOE %in% apoe_1, Series %in% series_1, Call %in% call_1)
data <- filter (data, Age >= 65)
#str(data);head(data);tail(data)
#Create PLINK map file
map <- select(data, SNP_ID, Position)
map <- mutate(map,morgans=0, chr=1)
map <- rename(map, bp=Position, rs=SNP_ID)
map <- select(map,chr,rs,morgans,bp)
map <- distinct(map)
#snps1 <- c("rs56243703","rs5744168","rs5744174","rs5744175","rs5744177")
snps <- c("rs56243703","rs5744174","rs5744175","rs5744177")
map <- filter(map,rs %in% snps )
print(map)
write.table(map,out1,sep='\t',quote=FALSE,row.names=F,col.names=F)
#Create variables for PLINK fam, cov, and lgen files
data <- mutate(data, AFF=99, A1=99, A2=99, APOE4dose=99, APOE2dose=99, SEX=99, ADSP=0, FID=0, IID=as.character(Subject_ID), PID=0, MID=0)
data[data$Case.control == 0,][, "AFF"] <- 1  #CON=0
data[data$Case.control == 1,][, "AFF"] <- 2  #AD=1
data[data$Case.control == 2,][, "AFF"] <- 2  #probable AD=2 are included as AD for PLINK analysis
data[data$Call == 11,][, "A1"] <- 1  #1 = major allele, 2 = minor allele
data[data$Call == 12,][, "A1"] <- 1  #split the allele calls as required by PLINK
data[data$Call == 22,][, "A1"] <- 2
data[data$Call == 11,][, "A2"] <- 1
data[data$Call == 12,][, "A2"] <- 2
data[data$Call == 22,][, "A2"] <- 2
data[data$Sex == 0,][, "SEX"] <- 1   #M=0
data[data$Sex == 1,][, "SEX"] <- 2   #F=1
data[data$APOE == 22,][, "APOE4dose"] <- 0 #code dose of A4 allele, 0,1,or2
data[data$APOE == 23,][, "APOE4dose"] <- 0
data[data$APOE == 24,][, "APOE4dose"] <- 1
data[data$APOE == 33,][, "APOE4dose"] <- 0
data[data$APOE == 34,][, "APOE4dose"] <- 1
data[data$APOE == 44,][, "APOE4dose"] <- 2
data[data$APOE == 22,][, "APOE2dose"] <- 2 #code dose of A4 allele, 0,1,or2
data[data$APOE == 23,][, "APOE2dose"] <- 1
data[data$APOE == 24,][, "APOE2dose"] <- 1
data[data$APOE == 33,][, "APOE2dose"] <- 0
data[data$APOE == 34,][, "APOE2dose"] <- 0
data[data$APOE == 44,][, "APOE2dose"] <- 0
data[data$Series == "ADSP",][, "ADSP"] <- 1 #1 indicates subject is ADSP, otherwise would be 0
#For debugging, evaluate whether data has been formatted correctly by filtering and grouping appropriately
#y <- data %>% filter(SNP_ID=="snps") %>% group_by(SNP_ID,AFF,A1,A2,SEX,ADSP,FID) %>% summarize(n=n())
#print(y)
#Create PLINK fam file
fam <- select(data,FID,IID,PID,MID,SEX,AFF)
fam <- distinct(fam)
str(fam); head(fam); tail(fam)
write.table(fam,out2,sep='\t',quote=FALSE,row.names=F,col.names=F)
#TLR5fam_1=read.table("TLR5.adsp.fam", header = F)
#str(TLR5fam_1);head(TLR5fam_1);tail(TLR5fam_1)
#Create PLINK cov file;
#Not sure why, but errors sometimes occurred in r when using "TLR5.cov"" as output using write.table
#So I used "TLR5cov.txt" thereby avoiding this problem
cov <- select(data,FID,IID,ADSP,SEX,Age,APOE4dose,APOE2dose)
cov <- distinct(cov)
#For debugging make sure structure looks good
#str(cov)
write.table(cov,out3,sep='\t',quote=FALSE,row.names=F,col.names=T)
#For debugging read table back in and make sure it looks right
#TLR5cov_1=read.table("TLR5_1cov.txt", header = T)
#str(TLR5cov_1);head(TLR5cov_1); tail(TLR5cov_1)
#Create PLINK lgen file
lgen <- select(data,FID,IID,SNP_ID,A1,A2)
#str(lgen)
write.table(lgen,out4,sep='\t',quote=FALSE,row.names=F,col.names=F)
#Create command strings for --assoc, --logistic, and --haplogistic
assoc <- paste("plink",sep=" ","--lfile", output, "--assoc", "--ci 0.95", "--out", output)
logistic <- paste("plink",sep=" ","--lfile", output, "--logistic", "--covar", out3, "--covar-name SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--out", output)
haplog <- paste("plink",sep=" ","--lfile", output, "--hap-window 4 --hap-logistic", "--covar", out3, "--covar-name SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.005 --out", output)
#Create names for the files that PLINK generates
assocfile <- paste(output,sep="",".assoc")
logisfile <- paste(output,sep="",".assoc.logistic")
haplogfile <- paste(output,sep="",".assoc.hap.logistic")
#Run the PLINK analyses
system(assoc)
system(logistic)
system(haplog)
#Read in, format, and print the results from --assoc
f1 <- read.table(assocfile, header=T)
#print(f1)
f1 <- f1 %>% select(CHR,SNP,BP,F_A, F_U, OR, P) %>% rename(FREQ_AD=F_A, FREQ_CON=F_U, OR_assoc=OR, P_assoc=P)
print(f1,digits=2,row.names=F)
print("", quote=F)
#head(f1)
#Read in results for --logistic, combine with results from --logistic, format, print
f1 <- f1 %>% select(CHR,SNP,BP,FREQ_AD,FREQ_CON)
f2 <- read.table(logisfile, header=T)
#print(f2)
f2 <- f2 %>% filter (TEST=="ADD") %>% select (SNP,NMISS,OR,L95,U95,P) %>% rename(OR_logis=OR, P_logis=P)
#head(f2)
f3<- left_join(f1,f2,by="SNP")
print(f3,digits=2,row.names=F)
print("", quote=F)
write.table(f3,out5,sep=",", quote=FALSE,row.names=F,col.names=T)
#Read in results for --hap-logistic, format, print
f4 <- read.table(haplogfile, header=T)
f4 <- f4 %>% select(-NSNP,-NHAP,-STAT) %>% arrange(desc(HAPLOTYPE))
print(f4,digits=2, row.names=F)
print("", quote=F)
#load requisite packages
library(data.table)
suppressWarnings(suppressMessages(library(dplyr)))
#To debug, it was convenient to provide the input called by the function here
input="TLR5.5SNPs.Ydb.csv"
#Read in dataset generated from the Younkin database
data <- read.table(input, sep=',', stringsAsFactors = FALSE, header=T)
#str(data)
#Create output files
#To debug, it was convenient to provide the output called by the function here
output <- "TLR5.5SNPs.Ydb""
#Generate names for the PLINK files and the .csv files that will be generated
out1 <- paste(output,sep="",".map")
out2 <- paste(output,sep="",".fam")
out3 <- paste(output,sep="","_cov.txt")
out4 <- paste(output,sep="",".lgen")
out5 <- paste(output,sep="",".plink.csv")
#print(out1);print(out2);print(out3);print(out4);print(out5)
#Generate PLINK map file
map <- select(data,chr, VariantID, VariantName, rs, position)
#str(map)
map <- distinct(map) #Remove duplicates
#str(map)
#print.data.frame(map)
map <- filter(map,!rs=="NULL") #Remove Indels (rs=NULL), genotyping was unreliable.
#print.data.frame(map)
#snps1 <- c("rs56243703","rs5744168","rs5744174","rs5744175","rs5744177")
#snps <- c("rs56243703","rs5744174","rs5744175","rs5744177")
map <- map %>% filter(rs %in% snps)
map <- mutate(map,morgans=0)
map <- rename(map, bp=position)
map <- select(map,chr,rs,morgans,bp)
map <- distinct(map)
#print(map)
write.table(map,out1,sep='\t',quote=FALSE,row.names=F,col.names=F)
#load requisite packages
library(data.table)
suppressWarnings(suppressMessages(library(dplyr)))
#To debug, it was convenient to provide the input called by the function here
input="TLR5.5SNPs.Ydb.csv"
#Read in dataset generated from the Younkin database
data <- read.table(input, sep=',', stringsAsFactors = FALSE, header=T)
#str(data)
#Create output files
#To debug, it was convenient to provide the output called by the function here
output <- "TLR5.5SNPs.Ydb""
#Generate names for the PLINK files and the .csv files that will be generated
out1 <- paste(output,sep="",".map")
out2 <- paste(output,sep="",".fam")
out3 <- paste(output,sep="","_cov.txt")
out4 <- paste(output,sep="",".lgen")
out5 <- paste(output,sep="",".plink.csv")
#print(out1);print(out2);print(out3);print(out4);print(out5)
#Generate PLINK map file
map <- select(data,chr, VariantID, VariantName, rs, position)
#str(map)
map <- distinct(map) #Remove duplicates
#str(map)
#print.data.frame(map)
map <- filter(map,!rs=="NULL") #Remove Indels (rs=NULL), genotyping was unreliable.
#print.data.frame(map)
#snps1 <- c("rs56243703","rs5744168","rs5744174","rs5744175","rs5744177")
#snps <- c("rs56243703","rs5744174","rs5744175","rs5744177")
#map <- map %>% filter(rs %in% snps)
map <- mutate(map,morgans=0)
map <- rename(map, bp=position)
map <- select(map,chr,rs,morgans,bp)
map <- distinct(map)
#print(map)
write.table(map,out1,sep='\t',quote=FALSE,row.names=F,col.names=F)
list.files
list.files()
head("TLR5.5SNPs.Ydb.map")
read.table("TLR5.5SNPs.Ydb.map")
getwd()
list.files()
library(data.table)
suppressWarnings(suppressMessages(library(dplyr)))
#Create output files
output <- "TLR5.comb"
out1 <- paste(output,sep="",".map")
out2 <- paste(output,sep="",".fam")
out3 <- paste(output,sep="","_cov.txt")
out4 <- paste(output,sep="",".lgen")
out5 <- paste(output,sep="",".plink.csv")
#Generate PLINK map file by copying and renaming "TLR5.adsp.map"
map <- read.table("TLR5.adsp.map", header = F)
print(map)
write.table(map, out1, sep='\t',quote=FALSE,row.names=F,col.names=F)
#Use dplyr bind_rows to generate combined fam, cov, and lgen files
fam.ydb <- read.table("TLR5.5SNPs.Ydb.fam", header=F, stringsAsFactors = FALSE)
colnames(fam.ydb) <- c("FID","IID","PID","MID","SEX","AFF")
#Change IID from number to character for compatiblity with fam.adsp
fam.ydb <- fam.ydb %>% mutate(IID=as.character(IID))
#str(fam.ydb)
fam.adsp <- read.table("TLR5.adsp.fam", header=F, stringsAsFactors = FALSE)
colnames(fam.adsp) <- c("FID","IID","PID","MID","SEX","AFF")
#str(fam.adsp)
fam.comb <- bind_rows(fam.ydb,fam.adsp)
#str(fam.comb)
write.table(fam.comb, out2, sep='\t',quote=FALSE,row.names=F,col.names=F)
cov.ydb <- read.table("TLR5.SNPs.Ydb_cov.txt", header=T, stringsAsFactors = FALSE)
cov.ydb <- cov.ydb %>% mutate(IID=as.character(IID))
#str(cov.ydb)
cov.adsp <- read.table("TLR5.adsp_cov.txt", header=T, stringsAsFactors = FALSE)
#str(cov.adsp)
cov.comb <- bind_rows(cov.ydb,cov.adsp)
#str(cov.comb)
x <- cov.comb %>% group_by(JS,RS,AUT,NCRAD,NW,ADSP) %>% summarise(n())
#print(x)
#Combined series covariates had NAs that should be 0
cov.comb[is.na(cov.comb)]<-0
x <- cov.comb %>% group_by(JS,RS,AUT,NCRAD,NW,ADSP) %>% summarise(n())
#print(x)
# NA replaced by 0 in all series covariates
write.table(cov.comb, out3, sep='\t',quote=FALSE,row.names=F,col.names=T)
lgen.ydb <- read.table("TLR5.5SNPs.Ydb.lgen", header=F, stringsAsFactors = FALSE)
colnames(lgen.ydb) <- c("FID","IID","rs","A1","A2")
lgen.ydb <- lgen.ydb %>% mutate(IID=as.character(IID))
#str(lgen.ydb)
lgen.adsp <- read.table("TLR5.adsp.lgen", header=F, stringsAsFactors = FALSE)
colnames(lgen.adsp) <- c("FID","IID","rs","A1","A2")
#str(lgen.adsp)
lgen.comb <- bind_rows(lgen.ydb,lgen.adsp)
#str(lgen.comb)
write.table(lgen.comb, out4, sep='\t',quote=FALSE,row.names=F,col.names=F)
assoc <- paste("plink",sep=" ","--lfile", output, "--assoc", "--ci 0.95", "--out", output)
logistic <- paste("plink",sep=" ","--lfile", output, "--logistic", "--covar", out3, "--covar-name ADSP,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--out", output)
haplog <- paste("plink",sep=" ","--lfile", output, "--hap-window 30 --hap-logistic", "--covar", out3, "--covar-name ADSP,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.005 --out", output)
assocfile <- paste(output,sep="",".assoc")
logisfile <- paste(output,sep="",".assoc.logistic")
haplogfile <- paste(output,sep="",".assoc.hap.logistic")
system(assoc)
system(logistic)
system(haplog)
f1 <- read.table(assocfile, header=T)
#print(f1)
f1 <- f1 %>% select(CHR,SNP,BP,F_A, F_U, OR, P) %>% rename(FREQ_AD=F_A, FREQ_CON=F_U, OR_assoc=OR, P_assoc=P)
print(f1,digits=2,row.names=F)
print("", quote=F)
#head(f1)
f1 <- f1 %>% select(CHR,SNP,BP,FREQ_AD,FREQ_CON)
f2 <- read.table(logisfile, header=T)
#print(f2)
f2 <- f2 %>% filter (TEST=="ADD") %>% select (SNP,NMISS,OR,L95,U95,P) %>% rename(OR_log=OR, P_log=P)
#head(f2)
f3<- left_join(f1,f2,by="SNP")
print(f3,digits=2,row.names=F)
print("", quote=F)
write.table(f3,out5,sep=",", quote=FALSE,row.names=F,col.names=T)
f4 <- read.table(haplogfile, header=T)
f4 <- f4 %>% select(-NSNP,-NHAP,-STAT) %>% arrange(desc(HAPLOTYPE))
print(f4,digits=2, row.names=F)
print("", quote=F)
hapomni <- paste("plink",sep=" ","--lfile", output, "--hap-window 4 --hap-logistic", "--covar", out3, "--covar-name ADSP,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.005 --hap-omnibus --out", output)
system(hapomni)
f4 <- read.table(haplogfile, header=T)
f4 <- f4 %>% rename(Pomni=P)
print(f4,digits=2, row.names=F)
#print("", quote=F)
?print()
list.files
list.files()
library(data.table)
suppressWarnings(suppressMessages(library(dplyr)))
#Create output files
output <- "TLR5.comb"
out1 <- paste(output,sep="",".map")
out2 <- paste(output,sep="",".fam")
out3 <- paste(output,sep="","_cov.txt")
out4 <- paste(output,sep="",".lgen")
out5 <- paste(output,sep="",".plink.csv")
out6 <- paste(output,sep="",".haplo.csv")
out7 <- paste(output,sep="",".homni.csv")
#Generate PLINK map file by copying and renaming "TLR5.adsp.map"
map <- read.table("TLR5.adsp.map", header = F)
print(map)
write.table(map, out1, sep='\t',quote=FALSE,row.names=F,col.names=F)
#Use dplyr bind_rows to generate combined fam, cov, and lgen files
fam.ydb <- read.table("TLR5.5SNPs.Ydb.fam", header=F, stringsAsFactors = FALSE)
colnames(fam.ydb) <- c("FID","IID","PID","MID","SEX","AFF")
#Change IID from number to character for compatiblity with fam.adsp
fam.ydb <- fam.ydb %>% mutate(IID=as.character(IID))
#str(fam.ydb)
fam.adsp <- read.table("TLR5.adsp.fam", header=F, stringsAsFactors = FALSE)
colnames(fam.adsp) <- c("FID","IID","PID","MID","SEX","AFF")
#str(fam.adsp)
fam.comb <- bind_rows(fam.ydb,fam.adsp)
#str(fam.comb)
write.table(fam.comb, out2, sep='\t',quote=FALSE,row.names=F,col.names=F)
cov.ydb <- read.table("TLR5.5SNPs.Ydb_cov.txt", header=T, stringsAsFactors = FALSE)
cov.ydb <- cov.ydb %>% mutate(IID=as.character(IID))
#str(cov.ydb)
cov.adsp <- read.table("TLR5.adsp_cov.txt", header=T, stringsAsFactors = FALSE)
#str(cov.adsp)
cov.comb <- bind_rows(cov.ydb,cov.adsp)
#str(cov.comb)
x <- cov.comb %>% group_by(JS,RS,AUT,NCRAD,NW,ADSP) %>% summarise(n())
#print(x)
#Combined series covariates had NAs that should be 0
cov.comb[is.na(cov.comb)]<-0
x <- cov.comb %>% group_by(JS,RS,AUT,NCRAD,NW,ADSP) %>% summarise(n())
#print(x)
# NA replaced by 0 in all series covariates
write.table(cov.comb, out3, sep='\t',quote=FALSE,row.names=F,col.names=T)
lgen.ydb <- read.table("TLR5.5SNPs.Ydb.lgen", header=F, stringsAsFactors = FALSE)
colnames(lgen.ydb) <- c("FID","IID","rs","A1","A2")
lgen.ydb <- lgen.ydb %>% mutate(IID=as.character(IID))
#str(lgen.ydb)
lgen.adsp <- read.table("TLR5.adsp.lgen", header=F, stringsAsFactors = FALSE)
colnames(lgen.adsp) <- c("FID","IID","rs","A1","A2")
#str(lgen.adsp)
lgen.comb <- bind_rows(lgen.ydb,lgen.adsp)
#str(lgen.comb)
write.table(lgen.comb, out4, sep='\t',quote=FALSE,row.names=F,col.names=F)
assoc <- paste("plink",sep=" ","--lfile", output, "--assoc", "--ci 0.95", "--out", output)
logistic <- paste("plink",sep=" ","--lfile", output, "--logistic", "--covar", out3, "--covar-name ADSP,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--out", output)
haplog <- paste("plink",sep=" ","--lfile", output, "--hap-window 30 --hap-logistic", "--covar", out3, "--covar-name ADSP,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.007 --out", output)
assocfile <- paste(output,sep="",".assoc")
logisfile <- paste(output,sep="",".assoc.logistic")
haplogfile <- paste(output,sep="",".assoc.hap.logistic")
system(assoc)
system(logistic)
system(haplog)
f1 <- read.table(assocfile, header=T)
#print(f1)
f1 <- f1 %>% select(CHR,SNP,BP,F_A, F_U, OR, L95, U95, P) %>% rename(FREQ_AD=F_A, FREQ_CON=F_U, OR_assoc=OR, L95a=L95, U95a=U95, P_assoc=P)
print(f1,digits=2,row.names=F)
print("", quote=F)
#head(f1)
f1 <- f1 %>% select(CHR,SNP,BP,FREQ_AD,FREQ_CON,OR_assoc,L95a,U95a,P_assoc)
f2 <- read.table(logisfile, header=T)
#print(f2)
f2 <- f2 %>% filter (TEST=="ADD") %>% select (SNP,NMISS,OR,L95,U95,P) %>% rename(OR_log=OR, P_log=P)
#head(f2)
f3<- left_join(f1,f2,by="SNP")
options(width = 130)
#head(f2)
f3 <- left_join(f1,f2,by="SNP")
f3 <- mutate(f3,Group="3_Comb")
print(f3,digits=2,row.names=F)
print("", quote=F)
write.table(f3,out5,sep=",", quote=FALSE,row.names=F,col.names=T)
f4 <- read.table(haplogfile, header=T)
f4 <- mutate(f4,Group="3_Comb")
f4 <- f4 %>% select(-NSNP,-NHAP,-STAT) %>% select(Group,CHR:P) %>% arrange(desc(HAPLOTYPE,Group))
print(f4,digits=2, row.names=F)
print("", quote=F)
write.table(f4,out6,sep=",", quote=FALSE,row.names=F,col.names=T)
hapomni <- paste("plink",sep=" ","--lfile", output, "--hap-window 30 --hap-logistic", "--covar", out3, "--covar-name ADSP,SEX,Age,APOE4dose,APOE2dose", "--ci 0.95", "--mhf 0.007 --hap-omnibus --out", output)
system(hapomni)
f4 <- read.table(haplogfile, header=T)
f4 <- f4 %>% rename(Pomni=P)
print(f4,digits=2, row.names=F)
write.table(f4,out7,sep=",", quote=FALSE,row.names=F,col.names=T)
#print("", quote=F)
#Reorganize plink.csv output files to facilitate comparison
f5 <- read.table("TLR5.5SNPs.Ydb.plink.csv", sep=',', stringsAsFactors = FALSE, header=T)
#print(f5)
f6 <- read.table("TLR5.adsp.plink.csv", sep=',', stringsAsFactors = FALSE, header=T)
#print(f6)
f7 <- read.table("TLR5.comb.plink.csv", sep=',', stringsAsFactors = FALSE, header=T)
#print(f7)
f8 <- bind_rows(f5,f6,f7)
f8 <- arrange(f8,BP,Group)
f8 <- select(f8,Group,CHR:OR_assoc,P_assoc:P_log)
print(f8,digits=2, row.names=F)
#Reorganize haplo.csv output files to facilitate comparison
f5 <- read.table("TLR5.5SNPs.Ydb.haplo.csv", sep=',', stringsAsFactors = FALSE, header=T)
#print(f5)
f6 <- read.table("TLR5.adsp.haplo.csv", sep=',', stringsAsFactors = FALSE, header=T)
#print(f6)
f7 <- read.table("TLR5.comb.haplo.csv", sep=',', stringsAsFactors = FALSE, header=T)
#print(f7)
f8 <- bind_rows(f5,f6,f7)
f8 <- arrange(f8,BP,Group)
f8 <- select(f8,Group,CHR:OR_assoc,P_assoc:P_log)
print(f8,digits=2, row.names=F)
plink <- function(input="TLR5.comb",comstring="plink --lfile  TLR5.comb --assoc --ci 0.95, --out=output", output=TLR5test)
}
comstring <- paste("plink",sep=" ","--lfile", input, "--hap-window 30 --hap-phase", "--out", output)
plink <- function(input,comstring, output){}
plink <- function(input,comstring, output){system(comstring)}
plink(input=TLR5.comb,comstring,output=TLR5test)
input
getwd()
input="TLR5.comb.lgen"
input
input=TLR5.comb.lgen
input="TLR5.comb.lgen""
input="TLR5.comb.lgen"
input="TLR5.comb.lgen"
output="TLR5.comb.test"
comstring <- paste("plink",sep=" ","--lfile", input, "--hap-window 30 --hap-phase", "--out", output)
comstring
comstring <- paste("plink",sep=" ","--lfile", input, "--hap-window 30 --hap-phase", "--out", output)
comstring
plink(comstring)
plink(,comstring,)
list.files()
system(comstring)
input
input <- TLR5.comb
input <- "TLR5.comb"
system(comstring)
comstring <- paste("plink",sep=" ","--lfile", input, "--hap-window 30 --hap-phase", "--out", output)
system(comstring)
phase <- read.table(TLR5.comb.test.phase-WIN1,header=T,stringsAsFactors = F)
phase <- read.table("TLR5.comb.test.phase-WIN1",header=T,stringsAsFactors = F)
str(phase)
ckhap <- phase %<% group_by(HAP1,HAP2) %>% summarize(n=n())
ckhap <- phase %>% group_by(HAP1,HAP2) %>% summarize(n=n())
ckhap
phase1 <- filter(phase,POSTPROB=1)
phase1 <- filter(phase,"POSTPROB"=1)
phase1 <- filter(phase,POSTPROB==1)
str(phase1)
ckphase1 <- phase1 %>% group_by(POSTPROB,HAP1,HAP2) %>% summarize(n=n)
ckphase1 <- phase1 %>% group_by(POSTPROB,HAP1,HAP2) %>% summarize(n=n())
ckphase1
phase1 <- phase1 %>% mutate(MLG=HAP1+HAP2)
str(phase1)
ckmlg <- phase1 %>% group_by(POSTPROB,MLG,HAP1,HAP2) %>% summarize(n=n()) %>% arrange(MLG)
ckmlg
ckmlg2 <- phase1 %>% group_by(POSTPROB,MLG) %>% summarize(n=n()) %>% arrange(MLG)
ckmlg2
getwd()
setwd("C:/Users/YOUNKIN/Documents/GitHub/Gene Diagram")
getwd()
list.files
list.files()
ABCA7 <- read.csv("23ABCA7_SNPannotation_02-28-15_0649.csv")
str(ABCA7)
